/* A pretty printer of the ast generated by the parser. */
#pragma once

#include "ast.hpp"
#include <iostream>
namespace cool {

class ASTPrinter : public ExprVisitor, public StmtVisitor  {
    public:
        ASTPrinter() = default;

        void print(std::unique_ptr<Expr>& expr) {
            expr->accept(this);
            std::cout << ast_string << '\n';
        }

        void print(std::unique_ptr<Stmt>& stmt) {
            stmt->accept(this);
            std::cout << ast_string << '\n';
        }

        void visitFeatureExpr(Feature* expr);
        void visitFormalExpr(Formal* expr);
        void visitAssignExpr(Assign* expr);
        void visitIfExpr(If* expr);
        void visitWhileExpr(While* expr);
        void visitBinaryExpr(Binary* expr);
        void visitUnaryExpr(Unary* expr);
        void visitVariableExpr(Variable* expr); 
        void visitCallExpr(Call* expr);
        void visitBlockExpr(Block* expr);
        void visitGroupingExpr(Grouping* expr);
        void visitGetExpr(Get* expr);
        void visitLiteralExpr(Literal* expr);
        void visitLetExpr(Let* expr);
        void visitCaseExpr(Case* expr);


        void visitProgramStmt(Program* stmt);
        void visitClassStmt(Class* smtt);

    private:
        class PrettyString {
            private:
                std::string s;
                unsigned int l;
            public:
                PrettyString(): s{""}, l{0} {}
                ~ PrettyString() = default;

                PrettyString& operator+=(std::string other) {
                    for (auto i=0; i<l; i++) s += "\t";
                    s += other;
                    return *this;
                }

                PrettyString& operator+=(const char* other) {
                    for (auto i=0; i<l; i++) s += "\t";
                    s += other;
                    return *this;
                }


                PrettyString& operator+(std::string other) {
                    *this += other;
                    return *this;
                }
                void indent() { l++; }
                void unindent() { l--; }

        };
        PrettyString s;
        std::string ast_string;
        std::string indent(unsigned int n) { 
            std::string s; 
            s += "\n";
            for (int i=0; i<n; i++)
                s += "\t";
            return s;
        }
        
};

} // namespace cool